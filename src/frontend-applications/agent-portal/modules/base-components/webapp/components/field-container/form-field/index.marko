<!--
Copyright (C) 2006-2024 KIX Service Software GmbH, https://www.kixdesk.com
--
This software comes with ABSOLUTELY NO WARRANTY. For details, see
the enclosed file LICENSE for license information (GPL3). If you
did not receive this file, see https://www.gnu.org/licenses/gpl-3.0.txt.
--
-->

<if(state.field)>
    <div
        class=[
            "form-field",
            {
                additionalFieldControlsNeeded:
                    input.additionalFieldControlsNeeded,
                "show-object": state.show,
            },
        ]
        draggable=state.draggable
        on-dragstart("handleDragStart")
        on-dragend("handleDragEnd")
        id=(state.field.instanceId)
    >
        <div class=[
            "field-label",
            {
                "no-label": !state.label || !state.field.showLabel,
            },
        ]>
            <span title=state.label class="label-text">
                <if(state.field.required && state.field.showLabel)>
                    <span class="required-field">
                        *
                    </span>
                </if>
                <if(state.field.showLabel)>
                    ${state.label}
                </if>
            </span>
        </div>
        <div class="field-icon">
            <if(state.hint)>
                <overlay-icon isHint content=state.hint title=state.label/>
            </if>
        </div>
        <div
            style={
                "padding-right": component.getPaddingRight(),
            }
            class="field-input"
        >
            <if(!state.field.empty && !state.field.asStructure)>
                <${component.getInputComponent()} ...{
                    field: state.field,
                    fieldId: state.field.property,
                    formId: state.formId,
                }/>
            </if>
            <else>
                <div class="form-separator-container">
                    <div class="form-separator"/>
                </div>
            </else>
        </div>
        <if(state.errorMessages && state.errorMessages.length)>
            <div class="validation-errors">
                <for|error, index| of=state.errorMessages>
                    <span>
                        <translation-string pattern=error/>
                        ${index < state.errorMessages.length - 1 ? " " : ""}
                    </span>
                </for>
            </div>
        </if>
        <if(
            component.hasChildren() &&
            (!state.field.empty || state.field.asStructure)
        )>
            <span class="minimize-icon-container">
                <if(state.minimized)>
                    <span on-click("minimize") class="kix-icon-sort-down"/>
                </if>
                <else>
                    <span on-click("minimize") class="kix-icon-triangle-up">
                        <span class="path1"/>
                        <span class="path2"/>
                    </span>
                </else>
            </span>
        </if>
        <if(input.additionalFieldControls || state.canDraggable)>
            <div class="additionalFieldControls">
                <if(input.additionalFieldControls)>
                    <${input.additionalFieldControls}/>
                </if>
                <if(state.canDraggable)>
                    <div
                        title=(state.translations["Translatable#Sort"])
                        on-mouseenter("setDraggable", true)
                        on-mouseleave("setDraggable", false)
                        class="form-control-button button-without-text drag-button"
                    >
                        <span class="kix-icon-sort-up"/>
                        <span class="kix-icon-sort-down"/>
                    </div>
                </if>
            </div>
        </if>
    </div>
    <if(
        !state.minimized &&
        (!state.field.empty || state.field.asStructure) &&
        component.hasChildren()
    )>
        <div class="sub-field-container">
            <field-container
                level=state.level + 1
                fields=(state.field.children)
                formId=state.formId
                additionalFieldControlsNeeded=input.additionalFieldControlsNeeded
                draggable=(state.field.draggableFields)
            />
        </div>
    </if>
</if>
